#!/usr/bin/env bash
set -euo pipefail

__wrap__() {

MODULAR_HOME=${MAGIC_VERSION:-"$HOME/.modular"}
BIN_DIR="$MODULAR_HOME/bin"

PLATFORM=$(uname -s)
ARCH=${MAGIC_ARCH:-$(uname -m)}

if [[ $PLATFORM == "Darwin" ]]; then
  PLATFORM="apple-darwin"
elif [[ $PLATFORM == "Linux" ]]; then
  PLATFORM="unknown-linux-musl"
elif [[ $(uname -o) == "Msys" ]]; then
  PLATFORM="pc-windows-msvc"
fi

if [[ $ARCH == "arm64" ]] || [[ $ARCH == "aarch64" ]]; then
  ARCH="aarch64"
fi

BINARY="magic-${ARCH}-${PLATFORM}"

printf "Installing the latest version of Magic...
"

DOWNLOAD_URL="https://dl.modular.com/public/magic/raw/versions/latest/${BINARY}"

mkdir -p "$BIN_DIR"

if hash curl 2> /dev/null; then
  HTTP_CODE=$(curl -SL --progress-bar "$DOWNLOAD_URL" --output "${BIN_DIR}/magic" --write-out "%{http_code}")
  if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 499 ]]; then
    echo "error: ${HTTP_CODE} response. Please try again later."
    exit 1
  elif [[ ${HTTP_CODE} -gt 299 ]]; then
    echo "error: '${DOWNLOAD_URL}' not found."
    echo "Sorry, Magic is not available for your OS and CPU architecture. "          "See https://modul.ar/requirements."
    exit 1
  fi
elif hash wget 2> /dev/null; then
  if ! wget -q --show-progress --output-document="${BIN_DIR}/magic" "$DOWNLOAD_URL"; then
    echo "error: '${DOWNLOAD_URL}' not found."
    echo "Sorry, Magic is not available for your OS and CPU architecture. "          "See https://modul.ar/requirements."
    exit 1
  fi
fi

# gh release download --repo modularml/magic $VERSION -p $BINARY --clobber -O "${BIN_DIR}/magic"
chmod +x "${BIN_DIR}/magic"

echo "Done. The 'magic' binary is in '${BIN_DIR}'"

update_shell() {
    FILE=$1
    LINE=$2

    # shell update can be suppressed by `MAGIC_NO_PATH_UPDATE` env var
    [[ ! -z "${MAGIC_NO_PATH_UPDATE-}" ]] && echo "No path update because MAGIC_NO_PATH_UPDATE has a value" && return

    # Create the file if it doesn't exist
    if [ -f "$FILE" ]; then
        touch "$FILE"
    fi

    # Append the line if not already present
    if ! grep -Fxq "$LINE" "$FILE"
    then
        echo "$LINE" >> "$FILE"
        echo -e "
Two more steps:
"
        echo -e "1. To use 'magic', run this command so it's in your PATH:
"
        echo -e "source ${FILE} 
"
        echo -e "2. To build with MAX and Mojo, go to http://modul.ar/get-started
"
    fi
}

case "$(basename "$SHELL")" in
    bash)
        if [ -w ~/.bash_profile ]; then
            BASH_FILE=~/.bash_profile
        else
            # Default to bashrc as that is used in non login shells instead of the profile.
            BASH_FILE=~/.bashrc
        fi
        LINE="export PATH=\"\$PATH:${BIN_DIR}\""
        update_shell $BASH_FILE "$LINE"
        ;;

    fish)
        LINE="fish_add_path ${BIN_DIR}"
        update_shell ~/.config/fish/config.fish "$LINE"
        ;;

    zsh)
        LINE="export PATH=\"\$PATH:${BIN_DIR}\""
        update_shell ~/.zshrc "$LINE"
        ;;

    tcsh)
        LINE="set path = ( $path ${BIN_DIR} )"
        update_shell ~/.tcshrc "$LINE"
        ;;

    *)
        echo "Could not update shell: $(basename "$SHELL")"
        echo "Please permanently add '${BIN_DIR}' to your $PATH to enable the 'magic' command."
        ;;
esac



}; __wrap__